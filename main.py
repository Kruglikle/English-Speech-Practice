from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from excel_manager import ExcelManager
import logging
from pydub import AudioSegment
import whisper
import re
import os
from thefuzz import fuzz


# –ü—É—Ç—å –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª (–ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PC)
desktop_cache = r"C:\Users\PC\Desktop\.cache"
os.makedirs(desktop_cache, exist_ok=True)
os.environ["XDG_CACHE_HOME"] = desktop_cache

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper
model = whisper.load_model("base")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–µ–Ω–µ–¥–∂–µ—Ä Excel
excel_manager = ExcelManager()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User {user.id} started the bot")

    eng, rus = excel_manager.get_random_pair()
    context.user_data["current_phrase"] = eng

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        f"–î–∞–≤–∞–π—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ–º –≤–∞—à–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ:\n\n"
        f"üá¨üáß –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ: <b>{eng}</b>\n"
        f"üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: <i>{rus}</i>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º!",
        parse_mode="HTML"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑–æ–π\n"
        "/next ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —Ñ—Ä–∞–∑–∞\n"
        "/words ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "üé§ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –ø—Ä–æ–≤–µ—Ä–∏–ª –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ!"
    )


def normalize_text(text):
    text = text.lower()
    text = re.sub(r'[^a-z\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "current_phrase" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    correct_phrase = "Well, I've been playing it since I was at school - since I was quite young, 'cos my dad was always very keen on it and he used to give me lessons, and then at university I joined a team and we used to play quite a lot.It's quite fashionable at the moment, actually, all over Europe it's becoming more fashionable and it's often difficult to book courts, you've got to get in there a week before. Urn I like it because it requires a lot of stamina, you've got to be fit, it's constant running right the way through and it doesn't take a long time."
    #correct_phrase = context.user_data["current_phrase"]

    voice_file = await update.message.voice.get_file()
    input_ogg = "input.ogg"
    input_wav = "input.wav"

    try:
        await voice_file.download_to_drive(input_ogg)
        sound = AudioSegment.from_file(input_ogg)
        sound.export(input_wav, format="wav")

        result = model.transcribe(input_wav, language="en")
        transcription = result["text"].strip()
        logger.info(f"Transcription: {transcription}")

        transcription_filtered = normalize_text(transcription)
        correct_filtered = normalize_text(correct_phrase)
        similarity = fuzz.token_sort_ratio(transcription_filtered, correct_filtered) / 100

        threshold = 0.8

        if similarity >= threshold:
            reply_text = (
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∏ —Ñ—Ä–∞–∑—É:\n\n<b>{correct_phrase}</b>"
            )
        else:
            reply_text = (
                f"‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n"
                f"–í—ã —Å–∫–∞–∑–∞–ª–∏: <i>{transcription}</i>\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞: <b>{correct_phrase}</b>\n"
                f"–ü–æ—Ö–æ–∂–µ—Å—Ç—å (–≥–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ): {similarity:.2f}"
            )

        await update.message.reply_text(reply_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    finally:
        if os.path.exists(input_ogg):
            os.remove(input_ogg)
        if os.path.exists(input_wav):
            os.remove(input_wav)


async def next_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    eng, rus = excel_manager.get_random_pair()
    context.user_data["current_phrase"] = eng

    await update.message.reply_text(
        f"üá¨üáß –°–ª–µ–¥—É—é—â–∞—è —Ñ—Ä–∞–∑–∞: <b>{eng}</b>\n"
        f"üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: <i>{rus}</i>",
        parse_mode="HTML"
    )


async def words_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random_words = excel_manager.get_random_words()
    word_list = '\n'.join(random_words)
    await update.message.reply_text(
        f"–°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n<b>{word_list}</b>",
        parse_mode="HTML"
    )


def main():
    application = Application.builder().token("7571103626:AAFh5msmOyGXhlfMOUom2RtRb03xBOJnc6I").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("next", next_phrase))
    application.add_handler(CommandHandler("words", words_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))

    application.run_polling()


if __name__ == "__main__":
    main()
